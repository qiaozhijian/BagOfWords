#include "DBoW3/DBoW3.h"
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <iostream>
#include <vector>
#include <string>
#include "util.h"

using namespace cv;
using namespace std;
void LoadImages(string &strPath, vector<string> &vstrImageLeft);

/***************************************************
 * 本节演示了如何根据前面训练的字典计算相似性评分
 * ************************************************/
#define TEST_INDEXES_NUM 2
int seq_interval = 100000;
int main(int argc, char **argv) {
    // read the images and database  
    cout << "reading database" << endl;
    DBoW3::Vocabulary vocab("./self_robot_vocab.yml.gz");
    // DBoW3::Vocabulary vocab("./vocab_larger.yml.gz");  // use large vocab if you want: 
    if (vocab.empty()) {
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }

    cout << "reading images... " << endl;
    vector<Mat> images;
    string path = "/media/qzj/Document/grow/research/slamDataSet/sweepRobot/round3/";
    int trainIdx[TEST_INDEXES_NUM] = { 1,2 };

    //载入所有图片的路径
    vector<string> vImgPaths;
    vector<uint32_t > vImgIndexes;
    for ( int i=0; i<TEST_INDEXES_NUM; i++ )
    {
        string seq = to_string(trainIdx[i]);
        while (seq.size()<2)
            seq="0"+seq;
        string img_path = path + seq + "/left/";
        vector<string> vstrImageLeft;
        LoadImages(img_path, vstrImageLeft);
        for(int j=0;j<vstrImageLeft.size();j++)
            vImgIndexes.push_back(j + seq_interval * trainIdx[i]);
        vImgPaths.insert(vImgPaths.end(),vstrImageLeft.begin(),vstrImageLeft.end());
    }
    //载入图片
    for(auto path:vImgPaths)
        images.push_back(imread(path));

    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    // detect ORB features
    cout << "detecting ORB features ... " << endl;
    Ptr<Feature2D> detector = ORB::create();
    vector<Mat> descriptors;
    for (Mat &image:images) {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(image, Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    ofstream f;
    f.open("./result_dbow.txt");
    f << fixed;

    // or with database 
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab, false, 0);
    for (int i = 0; i < descriptors.size(); i++)
        db.add(descriptors[i]);
    cout << "database info: " << db << endl;
    for (int i = 0; i < descriptors.size(); i++) {
        DBoW3::QueryResults ret;
        db.query(descriptors[i], ret, 200);      // max result=4
        f<<vImgIndexes[i]<<" ";
        for(int j=1;j<ret.size();j++)
        {
            f<<vImgIndexes[ret[j].Id];
            if(j<ret.size()-1)
                f<<" ";
        }
        f<<endl;
        //cout << "searching for image " << i << " returns " << ret << endl;
    }
    f.close();
    cout << "done." << endl;
}

void LoadImages(string &strPath, vector<string> &vstrImageLeft)
{
    cerr << "Start LoadImages." << endl;
    vstrImageLeft.reserve(10000);

    unsigned int iSize = strPath.size();
    if(strPath.at(iSize-1)!='/')
        strPath.push_back('/');

    //load image 法一：
    getSortedImages(strPath, vstrImageLeft);

    assert(vTimeStamps.size()==vstrImageLeft.size() && vTimeStamps.size()==vstrImageRight.size());

    cout<<"Finish LoadImages: "<<vstrImageLeft.size()<<endl;
}

